第三章 Git分支

暂存操作包括：
  1.对每一个文件计算校验和，SHA-1哈希字串，将校验和加入暂存区域；
  2.把当前版本的文件快照保存到Git仓库中，使用blob类型的对象存储快照；
  3.保存树对象tree：目录结构，各个文件对应blob对象索引
提交操作：
  创建一个提交对象(commit),包含：
  1.指向树对象tree的指针
  2.本次提交的作者等相关附属信息
  3.零个或多个该提交对象的父提交对象的指针。
每次修改提交，提交对象会包含一个指向上次提交对象的指针(parent)。
**********************************************************************************************
**********************************************************************************************
Git中的分支，本质是个指向commit对象的可变指针，Git会使用master作为分支的默认名字。
$ git branch 分支名称  --创建新分支，也就是新建一个分支指针指向当前commit对象。
  该命令仅仅是建立新的分支，不会自动切换到新分支中。
$ git branch -d 分支名称 --删除分支

-Git 如何知道当前在哪个分支上工作？
 Git保存着一个特别指针--HEAD，指向正在工作中的本地分支的指针(将HEAD想象成当前分支的别名)
$ git checkout 分支名称 --切换到其他分支
  该命令做了两件事情：
  1.HEAD指向了当前切换分支；
  2.将工作目录中的文件换成了当前分支指向的快照内容，主要作用是将原分支里做出的修改暂时取消，
    这样就可以向另一个方向进行开发。
Git 中的分支实际上仅是一个包含所指对象校验和(40个字符长度SHA-1字串)的文件。
新建一个分支就是向一个文件写入41个字节(外加一个换行符)那么简单。
$ git checkout -b 分支名称 --新建并切换到该分支

切换分支的时候，留心暂存区或者工作目录里那些还没有提交的修改，最好保持一个清洁的工作区域。
**********************************************************************************************
**********************************************************************************************
分支的合并
$ git merge 分支名称 --将分支合并到当前所在的分支

遇到冲突时的分支合并：
如果在不同的分支中都修改了同一个文件的同一部分，Git 就无法干净地把两者合到一起。
Git作了合并，但没有提交，它会停下来等你解决冲突。
要看看哪些文件在合并时发生冲突，可以用$ git status 查阅。
任何包含未解决冲突的文件都会以未合并（unmerged）的状态列出。
Git 会在有冲突的文件里加入标准的冲突解决标记，可以通过它们来手工定位并解决这些冲突。
解决冲突的办法无非是二者选其一或者由你亲自整合到一起。
在解决了所有文件里的所有冲突后，运行$ git add 将把它们标记为已解决状态。
再运行一次$ git status 来确认所有冲突都已解决.
如果觉得满意了，并且确认所有冲突都已解决，就可以用$ git commit 来完成这次合并提交
如果想给将来看这次合并的人一些方便，可以修改该信息，提供更多合并细节.
**********************************************************************************************
**********************************************************************************************
管理分支
$ git branch --不加任何参数，会给出当前所有分支的清单
  分支前的 * 字符：表示当前所在的分支
$ git branch -v --查看各个分支最后一个提交对象的信息
$ git branch --merged     --从该清单中筛选出你*已经*与当前分支合并的分支
$ git branch --no-merged  --从该清单中筛选出你*尚未*与当前分支合并的分支
**********************************************************************************************
**********************************************************************************************
远程分支
$ git fetch origin 
同步远程服务器上的数据到本地。该命令首先找到 origin 是哪个服务器，从上面获取你尚未拥有的数据，更新你本地的数据库，
然后把 origin/master 的指针移到它最新的位置上
$ git push 远程仓库名 分支名
$ git push 远程仓库名 分支名:分支名重命名 --把本地分支推送到某个命名不同的远程分支

在 fetch 操作下载好新的远程分支ABC之后，你仍然无法在本地编辑该远程仓库中的分支, 
你不会有一个新的 ABC 分支，有的只是一个你无法移动的 origin/ABC 指针。
如果要把该远程分支的内容合并到当前分支,运行$ git merge origin/serverfix

如果想要一份自己的 ABC 来开发，可以在远程分支的基础上分化出一个新的分支来$ git checkout -b ABC origin/ABC
其内容同远程分支 origin/ABC 一致，这样你就可以在里面继续开发了
**********************************************************************************************
**********************************************************************************************
跟踪远程分支
从远程分支 checkout 出来的本地分支，称为跟踪分支。
在克隆仓库时，Git 通常会自动创建一个名为 master 的分支来跟踪 origin/master
跟踪远程仓库中其他分支，两种方法：
$ git checkout -b [分支名] [远程名]/[分支名] --可以重命名本地分支
$ git checkout --track [远程名]/[分支名] 

删除远程分支
$ git push [远程名] :[分支名]